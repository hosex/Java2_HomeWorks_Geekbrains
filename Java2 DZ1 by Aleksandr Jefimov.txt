package task1;

/**
 * <p>
 *1. Разобраться с имеющимся кодом;
 2. Добавить класс Team, который будет содержать: название команды, массив из 4-х участников (т.е. в конструкторе можно сразу всех участников указывать), метод для вывода информации о членах команды прошедших дистанцию, метод вывода информации обо всех членах команды.
 3. Добавить класс Course (полоса препятствий), в котором будут находиться: массив препятствий, метод который будет просить команду пройти всю полосу;
 То есть в итоге должно быть:
 public static void main(String[] args) {
 Course c = new Course(...); // Создаем полосу препятствий
 Team team = new Team(...); // Создаем команду
 c.doIt(team); // Просим команду пройти полосу
 team.showResults(); // Показываем результаты
 }
 */
public class Task1 {
    public static void main(String[] args) {

        Course course1 = new Course(new Cross(300), new Wall(2),
                new Cross(800), new Water(5));

        Team team = new Team("Team 1", new Human("Aleks"), new Cat("Leon"),
                new Dog("Brave"), new Dog("Coca"));



        course1.doIt(team);

        System.out.println("\n= RESULTS =\n");
        team.showResults();
    }
}



DogClass:

package task1;
public class Dog extends Animal {
    public Dog(String name) {
        super("Пес", name, 2000, 2, 20);
    }




AnimalClass:

package task1;
public abstract class Animal implements Competitor {
    protected String type;
    protected String name;

    protected int maxRunDistance;
    protected int maxJumpHeight;
    protected int maxSwimDistance;

    protected boolean onDistance;

    @Override
    public boolean isOnDistance() {
        return onDistance;
    }

    public Animal(String type, String name, int maxRunDistance, int maxJumpHeight, int maxSwimDistance) {
        this.type = type;
        this.name = name;
        this.maxRunDistance = maxRunDistance;
        this.maxJumpHeight = maxJumpHeight;
        this.maxSwimDistance = maxSwimDistance;
        this.onDistance = true;
    }

    @Override
    public void run(int dist) {
        if (dist <= maxRunDistance) {
            System.out.println(type + " " + name + " отлично справился с кроссом");
        } else {
            System.out.println(type + " " + name + " не смог справиться с кроссом и сошел с дистанции");
            onDistance = false;
        }
    }

    @Override
    public void jump(int height) {
        if (height <= maxJumpHeight) {
            System.out.println(type + " " + name + " отлично перепрыгнул через стену");
        } else {
            System.out.println(type + " " + name + " не смог перепрыгнуть через стену и сошел с дистанции");
            onDistance = false;
        }
    }

    @Override
    public void swim(int dist) {
        if (maxSwimDistance == 0) {
            System.out.println(type + " " + name + " не умеет плавать и сходит с дистанции");
            onDistance = false;
            return;
        }
        if (dist <= maxSwimDistance) {
            System.out.println(type + " " + name + " отлично проплыл");
        } else {
            System.out.println(type + " " + name + " не смог справиться с заплывом и сошел с дистанции");
            onDistance = false;
        }
    }

    @Override
    public void result() {
        System.out.println(type + " " + name + ": " + onDistance);
    }
}



Competitor:

package task1;
public interface Competitor {
    void run(int dist);

    void swim(int dist);

    void jump(int height);

    void result();

    boolean isOnDistance();
}



ObstacleClass:

package task1;
public abstract class Obstacle {
    public abstract void doIt(Competitor competitor);
}



TeamClass:

package task1;
public class Team {

    private String teamName;
    private Competitor[] competitors;

    public Team(String teamName, Competitor... competitors) {
        this.teamName = teamName;
        this.competitors = competitors;
    }

    public Competitor[] getCompetitors() {
        return competitors;
    }

    public void showResults() {
        System.out.printf("%s info:\n", teamName);
        for (Competitor competitor : competitors) {
            competitor.result();
        }
    }

    public void positiveInfo() {
        System.out.printf("%s positive info:\n", teamName);
        for (Competitor competitor : competitors) {
            if (competitor.isOnDistance()) competitor.result();
        }
    }
}



WallClass:

package task1;
public class Wall extends Obstacle {
    private int height;

    public Wall(int height) {
        this.height = height;
    }

    @Override
    public void doIt(Competitor competitor) {
        competitor.jump(height);
    }
}



WatterClass:

package task1;
public class Water extends Obstacle {
    private int dist;

    public Water(int dist) {
        this.dist = dist;
    }

    @Override
    public void doIt(Competitor competitor) {
        competitor.swim(dist);
    }
}



CrossClass:

package task1;
public class Cross extends Obstacle {
    private int dist;

    public Cross(int dist) {
        this.dist = dist;
    }

    @Override
    public void doIt(Competitor competitor) {
        competitor.run(dist);
    }
}



CourseClass:

package task1;
public class Course {
    private Obstacle[] obstacles;

    public Course(Obstacle... obstacles) {
        this.obstacles = obstacles;
    }

    public void doIt(Team team) {
        for (Competitor c : team.getCompetitors()) {
            for (Obstacle o : obstacles) {
                o.doIt(c);
                if (!c.isOnDistance()) break;
            }
        }
    }
}